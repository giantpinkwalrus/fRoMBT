*** Settings ***
Library           ExtendedSelenium2Library
Library           Collections
Library           String
Library           RequestsLibrary

*** Variables ***
${Browser}        firefox
${DELAY}          0.2
${InvalidUser}    invalid@test.com
${InvalidPassword}    Invalid1
#${SERVER}        95.85.22.43
#${SServer}       http://95.85.22.43
${Protocol}       http://
${SERVER}         95.85.22.43
#${Protocol}      http://
#${SERVER}        95.85.22.43
${MainUrl}        ${Protocol}${SERVER}
${LoginUrl}       ${Protocol}${SERVER}/login
${BoardUrl}       ${Protocol}${SERVER}/boards
${RegUrl}         ${Protocol}${SERVER}/register
${LoginTitle}     Contriboard
${custombackground}    http://tinyurl.com/pevhhv7
${custombackground2}    http://tinyurl.com/o7ae8la

*** Keywords ***
Open Browser To Login Page
    Open Browser    ${LoginUrl}    ${Browser}
    Set Window Size    1920    1200
    Maximize Browser Window
    Set Selenium Speed    ${DELAY}
    Location Should Be    ${LoginUrl}
    Title Should Be    ${LoginTitle}
    Wait Until Page Contains Element    //form[@class='form']    timeout=2    error=Login Form Not Found

Configure Noise
    [Arguments]    ${Latency}    ${PLoss}
    Create Session    httpbin    ${SServer}
    Set Test Variable    ${data}    {"delay":${Latency},"loss":${PLoss}}
    ${headers}=    Create Dictionary    Content-Type    application/json
    ${resp}=    Put Request    httpbin    /limit    data=${data}    headers=${headers}
    Should Be Equal As Strings    ${resp.status_code}    200

Register User
    [Arguments]    ${NewUser}    ${NewPassword}
    Element Text Should Be    //button[@class='btn-secondary']    Register    error=Register button missing
    Click Button    //button[@class='btn-secondary']
    Wait Until Page Contains Element    //html/body/div/div/div[2]/form/section[3]/input    timeout=2    error=Input not found
    Location Should Be    ${RegUrl}
    Input Text    //input[@type='email']    ${NewUser}
    Input Password    //input[@type='password']    ${NewPassword}
    Input Password    //input[@name='passwordAgain']    ${NewPassword}
    ${check}    Get Element Attribute    //input[@class='btn-primary']@value
    Should Be Equal    ${check}    Register    error=Register button missing
    Click Element    //input[@class='btn-primary']
    Wait Until Page Contains Element    //div[@class='view view-workspace']    timeout=2    error=Board list Not Found
    Location Should Be    ${BoardUrl}

Login User
    [Arguments]    ${ValidUser}    ${ValidPassword}
    Input Username    ${ValidUser}
    Input User Password    ${ValidPassword}
    ${check}    Get Element Attribute    //input[@class='btn-primary']@value
    Should Be Equal    ${check}    Log in    error=Login button missing
    Submit Credentials
    Wait Until Page Contains Element    //div[@class='view view-workspace']    timeout=2    error=Board list Not Found
    Location Should Be    ${BoardUrl}

Input Username
    [Arguments]    ${username}
    Input Text    //input[@type='email']    ${username}

Input User Password
    [Arguments]    ${password}
    Input Password    //input[@type='password']    ${password}

Submit Credentials
    Click Button    //input[@class='btn-primary']

Invalid Login
    [Arguments]    ${username}    ${password}
    Input Username    ${username}
    Input User Password    ${password}
    Submit Credentials
    Login Should Have Failed

Login Should Have Failed
    Location Should Be    ${LoginUrl}
    #Temporary fix for new login alerts
    Element Should Not Be Visible    //div[@class='view view-workspace']    error=Login Succeeded

Go To Login Page
    Go To    ${LoginUrl}
    Location Should Be    ${LoginUrl}

Log Out
    Click Element    //div[@class='avatar online']
    Wait Until Page Contains Element    //ul[@class='dropdown options']    timeout=2    error=Dropdown List Not Found
    Click Element    //li[@id='options-sign-out']
    Wait Until Page Contains Element    //form[@class='form']    timeout=2    error=Login Form not found
    Location Should Be    ${LoginUrl}

Wallace First Try
    #Scenario1
    Click Element    //div[@class='avatar online']
    Wait Until Page Contains Element    //ul[@class='dropdown options']    timeout=2    error=Dropdown List Not Found
    #Click Element    //div[@class='user-voice-trigger']
    #Select Frame    //iframe[@class='uvw-dialog-iframe uv-popover-iframe']
    #Click Element    //i[@class='icon close-icon']
    #Element Should Not Be Visible    //article[@class='widget large-widget']    error=Widget Not Closed
    #Unselect Frame
    Click Element    //li[@id='options-sign-out']
    Wait Until Page Contains Element    //form[@class='form']    timeout=2    error=Login Form not found
    Location Should Be    ${LoginUrl}

Create Board
    Click Element    //span[@class='fa fa-fw fa-plus']

Click Edit Board
    [Arguments]    ${min}=2    ${max}=6
    Get Edit Xpath    ${min}    ${max}
    Click Element    ${Expath}
    Wait Until Page Contains Element    //form[@class='dialog dialog-edit-board']    timeout=2    error=Board Edit Dialog Not Found

Input Board Name
    [Arguments]    ${boardname}=Typing Somenthing...
    Input Text    //input[@name='board-name']    ${boardname}

Click Done Board Edit
    Click Button    //button[@class='btn-primary']
    Element Should Not Be Visible    //form[@class='dialog dialog-edit-board']    error=Edit Not Closed

Click Cancel Edit Board
    #No Cancel button in edit board
    Click Element    //div[@class='dialog-overlay']
    Element Should Not Be Visible    //form[@class='dialog dialog-edit-board']    error=Edit Not Closed

Random Edit Board
    [Arguments]    ${min}=2    ${max}=16
    Get Edit Xpath    ${min}    ${max}
    Click Element    ${Expath}
    Wait Until Page Contains Element    //form[@class='dialog dialog-edit-board']    timeout=2    error=Board Edit Dialog Not Found
    Input Text    //input[@name='board-name']    Typing board name
    Click Button    //button[@class='btn-primary']

Open Board
    [Arguments]    ${min}=2    ${max}=6
    Get Board Xpath    ${min}    ${max}
    Click Element    ${Bxpath}
    Wait Until Page Contains Element    //div[@class='board']    timeout=2    error=Board Not Open

Close Board
    Click Element    //span[@class='fa fa-fw fa-arrow-left']
    Wait Until Page Contains Element    //div[@class='content']    timeout=2    error=Board list Not Found
    Location Should Be    ${BoardUrl}

Delete Board
    [Arguments]    ${min}=2    ${max}=6
    Get Delete Xpath    ${min}    ${max}
    Assign Id To Element    ${Dxpath}    Board
    Click Element    ${Dxpath}
    Wait Until Page Contains Element    //form[@class='dialog dialog-remove-board']    timeout=2    error=Board Edit Dialog Not Found
    Click Button    //button[@class='btn-danger']
    Element Should Not Be Visible    Board    error=Board Not Deleted

Click Edit Board From Board
    Wait Until Page Contains Element    //div[@class='controls']    timeout=2    error=Controls Not Found
    Click Element    //span[@class='fa fa-fw fa-pencil']
    Wait Until Page Contains Element    //form[@class='dialog dialog-edit-board']

Edit Board From Board
    Wait Until Page Contains Element    //div[@class='controls']    timeout=2    error=Controls Not Found
    Click Element    //span[@class='fa fa-fw fa-pencil']
    Wait Until Page Contains Element    //form[@class='dialog dialog-edit-board']    timeout=2    error=Board Edit Dialog Not Found
    Input Text    //input[@name='board-name']    Typing new board name
    Click Button    //button[@class='btn-primary']

Create Ticket
    [Arguments]    ${min}    ${max}
    Get X Coordinate
    Get Y Coordinate
    Double Click Element At Coordinates    //div[@class='board']    ${x}    ${y}
    Wait Until Page Contains Element    //div[@class="ticket"]    timeout=2    error=Ticket Not Created
    Move Ticket    ${min}    ${max}    ${x}    ${y}

Move Ticket
    [Arguments]    ${min}    ${max}    ${x}    ${y}
    Get Ticket Xpath    ${min}    ${max}
    Get Move Coordinates    ${x}    ${y}
    Drag And Drop By Offset    ${Txpath}    ${xMove}    ${yMove}

Open Ticket Edit
    [Arguments]    ${min}=1    ${max}=5
    Get Ticket Xpath    ${min}    ${max}
    Double Click Element    ${Txpath}
    Wait Until Page Contains Element    //form[@class='dialog edit-ticket-dialog']    timeout=2    error=Edit Ticket Dialog Not Found
    ${status}    ${editdialog} =    Run Keyword And Ignore Error    Check Edit Dialog
    Run Keyword If    '${status}'=='PASS'    Input to Empty Ticket
    Run Keyword Unless    '${status}'=='PASS'    Input to Edited Ticket

Check Edit Dialog
    Page Should Contain Element    //input[@placeholder='Ticket header']

Input to Empty Ticket
    Page Should Contain Element    //input[@placeholder='Ticket header']

Input to Edited Ticket
    ${rid}    Get Element Attribute    //form[@class='dialog edit-ticket-dialog']@data-reactid
    Click Element    //span[@data-reactid='${rid}.1.1.0.0.0']
    Element Should Be Visible    //input[@placeholder='Ticket header']

Input Ticket Text
    [Arguments]    ${Ttext}=Typing Something
    Wait Until Page Contains Element    //form[@class='dialog edit-ticket-dialog']    timeout=2    error=Edit Ticket Dialog Not Found
    Input Text    //textarea[@placeholder='Ticket content']    ${Ttext}

Click Done Ticket Edit
    ${rid}    Get Element Attribute    //form[@class='dialog edit-ticket-dialog']@data-reactid
    Click Button    //button[@id='ticket-dialog-save']
    Element Should Not Be Visible    //form[@class='dialog edit-ticket-dialog']    error=Edit Not Closed

Random Edit Ticket
    [Arguments]    ${min}=1    ${max}=15
    Get Ticket Xpath    ${min}    ${max}
    Double Click Element    ${Txpath}
    Wait Until Page Contains Element    //form[@class='dialog edit-ticket-dialog']    timeout=2    error=Edit Ticket Dialog Not Found
    ${status}    ${editdialog} =    Run Keyword And Ignore Error    Check Edit Dialog
    Run Keyword If    '${status}'=='PASS'    Random Input to Empty Ticket
    Run Keyword Unless    '${status}'=='PASS'    Random Input to Edited Ticket

Random Input to Empty Ticket
    Element Should Be Visible    //input[@placeholder='Ticket header']
    Input Text    //textarea[@placeholder='Ticket content']    Typing something
    Click Button    //button[@id='ticket-dialog-save']

Random Input to Edited Ticket
    ${rid}    Get Element Attribute    //form[@class='dialog edit-ticket-dialog']@data-reactid
    Click Element    //span[@data-reactid='${rid}.1.1.0.0.0']
    Element Should Be Visible    //input[@placeholder='Ticket header']
    Input Text    //textarea[@placeholder='Ticket content']    Typing something
    Click Button    //button[@id='ticket-dialog-save']

Delete Ticket
    [Arguments]    ${min}=1    ${max}=5
    Get Ticket Xpath    ${min}    ${max}
    Assign Id To Element    ${Txpath}    Ticket
    Double Click Element    ${Txpath}
    Wait Until Page Contains Element    //form[@class='dialog edit-ticket-dialog']    timeout=2    error=Edit Ticket Dialog Not Found
    Click Element    //span[@class='deleteicon fa fa-trash-o']
    Element Should Not Be Visible    ticket    error=Ticket Not Deleted

Create Ticket with Markdown Text and Comment
    [Arguments]    ${x}    ${y}    ${comment}
    #Add markdown text
    Double Click Element At Coordinates    //div[@class='board']    ${x}    ${y}
    Wait Until Page Contains Element    //div[@class="ticket"]    timeout=2    error=Ticket Not Created
    Double Click Element    //div[@class='ticket']
    Wait Until Page Contains Element    //form[@class='dialog edit-ticket-dialog']    timeout=2    error=Edit Ticket Dialog Not Found
    Input Markdown Text
    Click Button    //button[@id='ticket-dialog-save']
    Double Click Element    //div[@class='ticket']
    #Check Markdown Syntax
    #Add comment
    Input Text    //input[@class='comment-input']    ${comment}
    Click Button    //button[@id='addCommentButton']
    Element Should Contain    //div[@class='comment']    ${comment}    error=Comment not found
    Click Button    //button[@id='ticket-dialog-save']

Check Markdown Syntax
    #Page Should Contain Element    //html/body/div[2]/div/form/div/div[1]/section[2]/section[2]/div/div[1]/span/h1    error=H1 tag not found
    #Page Should Contain Element    //html/body/div[2]/div/form/div/div[1]/section[2]/section[2]/div/div[1]/span/p    error=P tag not found
    #Page Should Contain Element    //html/body/div[2]/div/form/div/div[1]/section[2]/section[2]/div/div[1]/span/h2    error=H2 tag not found
    #Page Should Contain Element    //html/body/div[2]/div/form/div/div[1]/section[2]/section[2]/div/div[1]/span/ul    error=UL tag not found
    #Page Should Contain Element    //html/body/div[2]/div/form/div/div[1]/section[2]/section[2]/div/div[1]/span/h3    error=H3 tag not found
    #Page Should Contain Element    //html/body/div[2]/div/form/div/div[1]/section[2]/section[2]/div/div[1]/span/ol    error=OL tag not found

Change Background
    [Arguments]    ${min}=0    ${max}=9
    Assign Id To Element    //div[@class='dialog-overlay']    Content
    ${rid}    Get Element Attribute    Content@data-reactid
    Get Random Background    ${min}    ${max}
    Select From List By Value    //select[@data-reactid='${rid}.0.1.4.0.0']    ${background}
    Set Test Variable    ${set}    changebackground
    Run Keyword If    '${background}'=='BLANK'    Empty Background
    Run Keyword If    '${background}'=='CUSTOM'    Custom Background
    Run Keyword Unless    '${background}'=='BLANK' or '${background}'=='CUSTOM'    Check Background
    # BROKEN! doesn't chechk that background is actually changed.
    # Because robot can't get right style attributes.

Random Set Board Background
    [Arguments]    ${min}=2    ${max}=16
    Get Edit Xpath    ${min}    ${max}
    Click Element    ${Expath}
    Wait Until Page Contains Element    //form[@class='dialog dialog-edit-board']    timeout=2    error=Board Edit Dialog Not Found
    Assign Id To Element    //div[@class='dialog-overlay']    Content
    ${rid}    Get Element Attribute    Content@data-reactid
    Get Random Background
    Select From List By Value    //select[@data-reactid='${rid}.0.1.4.0.0']    ${background}
    Set Test Variable    ${set}    setbackground
    ${check}    Get Element Attribute    //div[@class='minimap']@style
    Run Keyword If    '${background}'=='BLANK'    Empty Background
    Run Keyword If    '${background}'=='CUSTOM'    Custom Background
    Run Keyword Unless    '${background}'=='BLANK' or '${background}'=='CUSTOM'    Check Background
    # Fix background check

Empty Background
    ${checkempty}    Get Element Attribute    //div[@class='minimap']@style
    #Should Be Equal    ${checkempty}    width: 192px; height: 108px;    error=Background Not Empty
    Run Keyword if    '${set}'=='setbackground'    Click Done Board Edit

Custom Background
    ${checkcustom}    Get Element Attribute    //div[@class='minimap']@style
    #Should Be Equal    ${checkcustom}    width: 192px; height: 108px;    error=Background Not Empty
    Element Should Be Visible    //input[@type='url']
    Input Text    //input[@placeholder='URL']    ${custombackground}
    ${checkcustom2}    Get Element Attribute    //div[@class='minimap']@style
    #Should Be Equal    ${checkcustom2}    width: 192px; height: 108px;    error=Custom Background Not Changed
    #Should Be Equal    ${checkcustom2}    width: 192px; height: 108px; background-image: url( ${custombackground});    error=Custom Background Not Changed
    Run Keyword if    '${set}'=='setbackground'    Click Done Board Edit

Check Background
    ${checkdefault}    Get Element Attribute    //div[@class='minimap']@style
    #Should Be Equal    ${checkdefault}    width: 192px; height: 108px;    error=Custom Background Not Changed
    #Should Be Equal    ${checkdefault}    width: 192px; height: 108px; background-image: url("/dist/assets/img/bg/${bcheck}.png");    error=Background Not Changed
    Run Keyword if    '${set}'=='setbackground'    Click Done Board Edit

Set Custom Background
    Click Element    //span[@class='fa fa-fw fa-pencil']
    Wait Until Page Contains Element    //form[@class='dialog dialog-edit-board']    timeout=2    error=Board Edit Dialog Not Found
    Click Element    //div[@class='select']
    Click Element    //html/body/div[2]/div/form/section[2]/div[2]/div/select/option[2]
    Wait Until Page Contains Element    //div[@class='custom-background-url']
    Input Text    //input[@placeholder='URL']    ${custombackground2}
    Click Button    //button[@class='btn-primary']
    #Check
    ${checkcustom}    Get Element Attribute    //div[@class='board']@style
    ${image}    Fetch From Right    ${checkcustom}    x);
    Set Test Variable    ${customcheck}    ${SPACE}background-image: url("${custombackground2}");
    Run Keyword If    '${image}'=='${customcheck}'    Check Custom Background Empty
    Run Keyword If    '${image}'!='${customcheck}'    Check Custom Background

Check Custom Background Empty
    Should Be Equal    ${image}    ${SPACE}background-image: url("${custombackground2}");    error=Custom Background Not Changed

Check Custom Background
    ${image2}    Fetch From Left    ${checkcustom}    ${SPACE}transition
    ${image3}    Fetch From Right    ${image2}    px;
    Should Be Equal    ${image3}    ${SPACE}background-image: url("${custombackground2}");    error=Background Not Empty

Click Magnet On
    Assign Id To Element    //div[@class='view view-board']    reactID
    ${rid}    Get Element Attribute    reactID@data-reactid
    Click Element    //span[@class='fa fa-fw fa-magnet']
    Assign Id To Element    //div[@data-reactid='${rid}.5.$magnet']    magnetOnID
    ${class}    Get Element Attribute    magnetOnID@class
    Should Match    ${class}    control active

Click Magnet Off
    Assign Id To Element    //div[@class='view view-board']    reactID
    ${rid}    Get Element Attribute    reactID@data-reactid
    Click Element    //span[@class='fa fa-fw fa-magnet']
    Assign Id To Element    //div[@data-reactid='${rid}.5.$magnet']    magnetOffID
    ${class}    Get Element Attribute    magnetOffID@class
    Should Match    ${class}    control

Click Globe On
    Assign Id To Element    //div[@class='view view-board']    reactID
    ${rid}    Get Element Attribute    reactID@data-reactid
    Element Should Not Be Visible    //div[@data-reactid='${rid}.2.0.1']
    Click Element    //span[@class='fa fa-fw fa-globe']
    Assign Id To Element    //div[@data-reactid='${rid}.5.$globe']    globeOnID
    ${class}    Get Element Attribute    globeOnID@class
    Should Match    ${class}    control active
    Element Should Be Visible    //div[@data-reactid='${rid}.2.0.1']

Click Globe Off
    Assign Id To Element    //div[@class='view view-board']    reactID
    ${rid}    Get Element Attribute    reactID@data-reactid
    Element Should Be Visible    //div[@data-reactid='${rid}.2.0.1']
    Click Element    //span[@class='fa fa-fw fa-globe']
    Assign Id To Element    //div[@data-reactid='${rid}.5.$globe']    globeOffID
    ${class}    Get Element Attribute    globeOffID@class
    Should Match    ${class}    control
    Element Should Not Be Visible    //div[@data-reactid='${rid}.2.0.1']

Review Tickets
    Click Element    //span[@class='fa fa-fw fa-eye']
    Wait Until Page Contains Element    //div[@class='review-dialog-container']
    Click Element    //span[@class='fa fa-chevron-right']
    Click Element    //span[@class='fa fa-chevron-left']
    Click Element    //span[@class="fa fa-fw fa-arrow-left board-link"]

Click Profile
    Click Element    //div[@class='avatar online']
    Wait Until Page Contains Element    //ul[@class='dropdown options']    timeout=2    error=Dropdown List Not Found

Close Profile
    Click Element    //div[@class='avatar online']
    Element Should Not Be Visible    //ul[@class='dropdown options']    error=Dropdown not closed

Change Password
    [Arguments]    ${ValidPassword}    ${ChangedPassword}
    Click Element    //div[@class='avatar online']
    Wait Until Element Is Visible    //ul[@class='dropdown options']    timeout=2    error=Dropdown List Not Found
    Click Element    //li[@id='options-user']
    ${rid}    Get Element Attribute    //div[@class='form-container dialog']@data-reactid
    Click Element    //span[@data-reactid='${rid}.0:$1.0.1']
    Wait Until Page Contains Element    //input[@name='oldPassword']    error=Change Password Form Not Found
    Input Text    //input[@name='oldPassword']    ${ValidPassword}
    Input Text    //input[@name='newPassword']    ${ChangedPassword}
    Input Text    //input[@name='newPasswordAgain']    ${ChangedPassword}
    Click Element    //input[@data-reactid='${rid}.1:1.2']
    Click Element    //span[@class='fa fa-times']

Set Username
    [Arguments]    ${newUsername}
    Click Element    //div[@class='avatar online']
    Wait Until Element Is Visible    //ul[@class='dropdown options']    timeout=2    error=Dropdown List Not Found
    Click Element    //li[@id='options-user']
    Wait Until Element Is Visible    //form[@class='login-info']    timeout=2    error=Profile information dialog not found
    Input Text    //input[@name='name']    ${newUsername}
    Click Element    //input[@class='btn-primary']
    Click Element    //span[@class="fa fa-times"]

Exit Profile Page
    Click Element    //span[@class='fa fa-times']

Click Feedback
    Click Element    //div[@class='user-voice-trigger']
    Select Frame    //iframe[@class='uvw-dialog-iframe uv-popover-iframe']
    Wait Until Element Is Visible    //article[@class='widget large-widget']    timeout=2    error=Widget Not Open
    Element Text Should Be    //h1[@class='pane-title']    Send us a message    error=Write message page not open
    Click Element    //i[@class='icon close-icon']
    Element Should Not Be Visible    //article[@class='widget large-widget']    error=Widget Not Closed
    Unselect Frame

Send Feedback
    Click Element    //div[@class='avatar online']
    Wait Until Page Contains Element    //ul[@class='dropdown options']    timeout=2    error=Dropdown List Not Found
    Click Element    //div[@class='user-voice-trigger']
    Select Frame    //iframe[@class='uvw-dialog-iframe uv-popover-iframe']
    Wait Until Element Is Visible    //article[@class='widget large-widget']    timeout=2    error=Widget Not Open
    Element Text Should Be    //h1[@class='pane-title']    Send us a message    error=Write message page not open
    Input Text    //textarea[@class='faux-textbox-textarea']    Typing feedback...
    Click Element    //input[@class='checkbox-input']
    Element Text Should Be    //button[@class='button primary']    Next    error=Next Button Missing
    Click Button    //button[@class='button primary']
    Element Text Should Be    //h1[@class='pane-title mb1']    Additional details    error=Send message page not open
    Input Text    //input[@placeholder='Email address']    ${ValidUser}
    Get Random Type
    Select From List By Value    //select[@class='selectbox full-width']    ${type}
    Element Text Should Be    //button[@class='button primary']    Send message    error=Send Button Missing
    Click Button    //button[@class='button primary']
    Wait Until Element Is Visible    //div[@class='thank-you-text pt2']    timeout=5    error=Message not sent to send
    Wait Until Element Is Visible    //button[@class='button primary icon-button']    timeout=5    error=Message not sent
    Click Element    //i[@class='icon close-icon']
    Element Should Not Be Visible    //article[@class='widget large-widget']    error=Widget Not Closed
    Unselect Frame
    Click Element    //span[@class='fa fa-fw fa-user']

Share Board From Board
    Click Element    //span[@class='fa fa-fw fa-share-alt']
    Wait Until Page Contains Element    //form[@class='dialog dialog-edit-board']    timeout=2    error=Board Edit Dialog Not Found
    Click Button    //button[@class='btn-secondary']
    ${SharedUrl}    Get Value    //input[@name='board-share']
    Should Not Be Equal    ${SharedUrl}    ${EMPTY}
    Set Suite Variable    ${Shared}    ${SharedUrl}
    Click Button    //button[@class='btn-primary']

Random Share Board
    [Arguments]    ${min}=2    ${max}=11
    Get Board Xpath    ${min}    ${max}
    Click Element    ${Bxpath}
    Wait Until Page Contains Element    //div[@class='board']    timeout=2    error=Board Not Open
    Click Element    //span[@class='fa fa-fw fa-share-alt']
    Wait Until Page Contains Element    //form[@class='dialog dialog-edit-board']    timeout=2    error=Board Edit Dialog Not Found
    Click Button    //button[@class='btn-secondary']
    ${SharedUrl}    Get Value    //input[@name='board-share']
    Should Not Be Equal    ${SharedUrl}    ${EMPTY}
    Set Suite Variable    ${Shared}    ${SharedUrl}
    Click Button    //button[@class='btn-primary']

Open Shared Board
    Open Browser    ${Shared}    ${Browser}
    Set Window Size    1920    1200
    Maximize Browser Window
    Set Selenium Speed    ${DELAY}
    Location Should Be    ${Shared}

Login to Shared Board
    [Arguments]    ${User}=Tester
    Input Text    //input[@name='username']    ${User}
    Click Button    //input[@class='btn-primary']
    Wait Until Page Contains Element    //div[@class='board']    timeout=2    error=Board Not Open

Open Help
    Click Element    //span[@class='fa fa-fw fa-question']
    Wait Until Element Is Visible    //div[@class='infospace']    timeout=3    error=Help not open

Close Help
    Click Element    //span[@class='fa fa-fw fa-times']
    Element Should Not Be Visible    //div[@class='infospace']

Change Help Slides
    Wait Until Element Is Visible    //div[@class='info-view-active slide-0-admin']    timeout=2    error=Slide not open
    Wait Until Element Is Visible    xpath=/html/body/div[2]/div/form/div/div[2]/ul/li[2]/button    error=Slide change button missing
    Click Element    xpath=/html/body/div[2]/div/form/div/div[2]/ul/li[2]/button
    Wait Until Element Is Visible    //div[@class='info-view-active slide-1-admin']    timeout=2    error=Slide not changed
    Wait Until Element Is Visible    xpath=/html/body/div[2]/div/form/div/div[2]/ul/li[3]/button    error=Slide change button missing
    Click Element    xpath=/html/body/div[2]/div/form/div/div[2]/ul/li[3]/button
    Wait Until Element Is Visible    //div[@class='info-view-active slide-2-admin']    timeout=2    error=Slide not changed
    Wait Until Element Is Visible    xpath=/html/body/div[2]/div/form/div/div[2]/ul/li[4]/button    error=Slide change button missing
    Click Element    xpath=/html/body/div[2]/div/form/div/div[2]/ul/li[4]/button
    Wait Until Element Is Visible    //div[@class='info-view-active slide-3-admin']    timeout=2    error=Slide not changed
    Wait Until Element Is Visible    xpath=/html/body/div[2]/div/form/div/div[2]/ul/li[5]/button    error=Slide change button missing
    Click Element    xpath=/html/body/div[2]/div/form/div/div[2]/ul/li[5]/button
    Wait Until Element Is Visible    //div[@class='info-view-active slide-4-admin']    timeout=2    error=Slide not changed
    Wait Until Element Is Visible    xpath=/html/body/div[2]/div/form/div/div[2]/ul/li[6]/button    error=Slide change button missing
    Click Element    xpath=/html/body/div[2]/div/form/div/div[2]/ul/li[6]/button
    Wait Until Element Is Visible    //div[@class='info-view-active slide-5-admin']    timeout=2    error=Slide not changed
    Wait Until Element Is Visible    xpath=/html/body/div[2]/div/form/div/div[2]/ul/li[7]/button    error=Slide change button missing
    Click Element    xpath=/html/body/div[2]/div/form/div/div[2]/ul/li[7]/button
    Wait Until Element Is Visible    //div[@class='info-view-active slide-6-admin']    timeout=2    error=Slide not changed
    Wait Until Element Is Visible    xpath=/html/body/div[2]/div/form/div/div[2]/ul/li[8]/button    error=Slide change button missing
    Click Element    xpath=/html/body/div[2]/div/form/div/div[2]/ul/li[8]/button
    Wait Until Element Is Visible    //div[@class='info-view-active slide-7-admin']    timeout=2    error=Slide not changed
    Wait Until Element Is Visible    xpath=/html/body/div[2]/div/form/div/div[2]/ul/li[1]/button    error=Slide change button missing
    Click Element    xpath=/html/body/div[2]/div/form/div/div[2]/ul/li[1]/button
    Wait Until Element Is Visible    //div[@class='info-view-active slide-0-admin']    timeout=2    error=Slide not changed

Click About Button
    Click Element    //div[@id='avatar']
    Wait Until Page Contains Element    //ul[@class='dropdown options']    timeout=2    error=Dropdown List Not Found
    Click Element    //li[@id='options-info']
    Wait Until Page Contains Element    //form[@class='dialog dialog-about']    timeout=2    error=About Dialog Not Open
    Click Button    //button[@class='btn-primary']
    Click Element    //div[@class='board']

Check Board Members
    Click Element    //span[@class='fa fa-fw fa-users']
    Page Should Contain Element    //form[@class='dialog dialog-board-members']
    Click Button    //button[@class='btn-primary']

Export Board Image
    Click Element    //span[@class='fa fa-fw fa-download']
    Wait Until Page Contains Element    //form[@class='dialog dialog-edit-board']    timeout=2    error=Export Dialog Not Open
    Assign Id To Element    //div[@class='dialog-overlay']    reactID
    ${value}    Get Element Attribute    reactID@data-reactid
    Get Export    3
    Select From List By Value    //select[@id='export-select']    ${export}
    Click Element    //a[@class='btn btn-secondary']
    Click Element    //button[@class='btn-primary']

Resize Board
    [Arguments]    ${widthmin}    ${widthmax}    ${heightmin}    ${heightmax}
    Click Element    //span[@class='fa fa-fw fa-pencil']
    Wait Until Page Contains Element    //form[@class='dialog dialog-edit-board']
    Get Board Size    ${widthmin}    ${widthmax}    ${heightmin}    ${heightmax}
    Input Text    //input[@placeholder='Board Width']    ${width}
    Input Text    //input[@placeholder='Board Height']    ${height}
    Click Element    //button[@class='btn-primary']
    Element Should Not Be Visible    //form[@class='dialog dialog-edit-board']
    Calculate Board Size    ${width}    ${height}
    ${styleatt}    Get Element Attribute    //div[@class='board']@style
    ${boardsize}    Fetch From Left    ${styleatt}    transition
    Set Test Variable    ${sizecheck}    width: ${boardwidth}px; height: ${boardheight}px;${SPACE}
    Run Keyword If    '${boardsize}'=='${sizecheck}'    Verify Resize Empty Background
    Run Keyword If    '${boardsize}'!='${sizecheck}'    Verify Resize

Verify Resize Empty Background
    Should Be Equal    ${boardsize}    width: ${boardwidth}px; height: ${boardheight}px;${SPACE}    error=Board Not Resized

Verify Resize
    ${boardsize2}    Fetch From Left    ${styleatt}    background
    Should Be Equal    ${boardsize2}    width: ${boardwidth}px; height: ${boardheight}px;${SPACE}    error=Board Not Resized

Get Board Xpath
    [Arguments]    ${min}    ${max}
    ${int}    Evaluate    random.randint(${min}, ${max})    random
    Set Test Variable    ${Bxpath}    xpath=/html/body/div/div/div[2]/div[${int}]/div[1]/div

Get Edit Xpath
    [Arguments]    ${min}    ${max}
    ${int}    Evaluate    random.randint(${min}, ${max})    random
    Set Test Variable    ${Expath}    xpath=/html/body/div/div/div[2]/div[${int}]/div[3]/div[2]/span

Get Delete Xpath
    [Arguments]    ${min}    ${max}
    ${int}    Evaluate    random.randint(${min}, ${max})    random
    Set Test Variable    ${Dxpath}    xpath=/html/body/div/div/div[2]/div[${int}]/div[3]/div[1]/span

Get Ticket Xpath
    [Arguments]    ${min}    ${max}
    ${int}    Evaluate    random.randint(${min}, ${max})    random
    Set Test Variable    ${Txpath}    xpath=/html/body/div/div/div[2]/div/div[1]/div[${int}]
    Set Test Variable    \${tint}    ${EMPTY}
    Set Test Variable    ${tint}    ${int}

Get X Move
    [Arguments]    ${min}=-960    ${max}=960
    ${int}    Evaluate    random.randint(${min}, ${max})    random
    Set Test Variable    ${xMove}    ${int}

Get Y Move
    [Arguments]    ${min}=-540    ${max}=540
    ${int}    Evaluate    random.randint(${min}, ${max})    random
    Set Test Variable    ${yMove}    ${int}

Get Move Coordinates
    [Arguments]    ${x}    ${y}
    Run Keyword If    '${x}'<'0'    Calculate X Negative    ${x}
    Run Keyword If    '${x}'>'0'    Calculate X Positive    ${x}
    Run Keyword If    '${x}'=='0'    Calculate X Zero    ${x}
    Run Keyword If    '${y}'<'0'    Calculate Y Negative    ${y}
    Run Keyword If    '${y}'>'0'    Calculate Y Positive    ${y}
    Run Keyword If    '${y}'=='0'    Calculate Y Zero    ${y}

Calculate X Negative
    [Arguments]    ${x}
    ${minX}    Evaluate    -${x}-960
    ${maxX}    Evaluate    ${minX}+1920
    Get X Move    ${minX}    ${maxX}

Calculate X Positive
    [Arguments]    ${x}
    ${maxX}    Evaluate    960-${x}
    ${minX}    Evaluate    ${maxX}-1920
    Get X Move    ${minX}    ${maxX}

Calculate X Zero
    [Arguments]    ${x}
    ${maxX}    Evaluate    ${x}+960
    ${minX}    Evaluate    ${x}-960
    Get X Move    ${minX}    ${maxX}

Calculate Y Negative
    [Arguments]    ${y}
    ${minY}    Evaluate    -${y}-540
    ${maxY}    Evaluate    ${minY}+1080
    Get Y Move    ${minY}    ${maxY}

Calculate Y Positive
    [Arguments]    ${y}
    ${maxY}    Evaluate    540-${y}
    ${minY}    Evaluate    ${maxY}-1080
    Get Y Move    ${minY}    ${maxY}

Calculate Y Zero
    [Arguments]    ${y}
    ${maxY}    Evaluate    ${y}+540
    ${minY}    Evaluate    ${y}-540
    Get Y Move    ${minY}    ${maxY}

Get Y Coordinate
    [Arguments]    ${min}=-540    ${max}=540
    ${int}    Evaluate    random.randint(${min}, ${max})    random
    Set Test Variable    ${y}    ${int}

Get X Coordinate
    [Arguments]    ${min}=-960    ${max}=960
    ${int}    Evaluate    random.randint(${min}, ${max})    random
    Set Test Variable    ${x}    ${int}

Get Random Background
    [Arguments]    ${min}=0    ${max}=9
    ${int}    Evaluate    random.randint(${min}, ${max})    random
    ${list}    Create List    DEFAULT    CUSTOM    BLANK    SWOT    PLAY
    ...    KANBAN    KEEP_DROP_TRY    SMOOTH_BRAINSTORMING    LEAN_CANVAS    IDEA_GATHERING
    ${item}    Get From List    ${list}    ${int}
    Set Test Variable    \${background}    ${EMPTY}
    Set Suite Variable    ${background}    ${item}
    ${list2}    Create List    1    custom    blank    4    5
    ...    6    7    8    9    10
    ${item2}    Get From List    ${list2}    ${int}
    Set Test Variable    \${bcheck}    ${EMPTY}
    Set Test Variable    ${bcheck}    ${item2}

Get Random Type
    [Arguments]    ${min}=0    ${max}=2
    ${int}    Evaluate    random.randint(${min}, ${max})    random
    ${list}    Create List    Support Request    Bug Report    Other
    ${item}    Get From List    ${list}    ${int}
    Set Test Variable    \${type}    ${EMPTY}
    Set Test Variable    ${type}    ${item}

Get Ticket Color
    [Arguments]    ${min}=0    ${max}=3
    ${int}    Evaluate    random.randint(${min}, ${max})    random
    ${list}    Create List    \#eb584a    \#4f819a    \#724a7f    \#dcc75b
    ${item}    Get From List    ${list}    ${int}
    Set Test Variable    \${color}    ${EMPTY}
    Set Test Variable    ${color}    ${item}
    ${list2}    Create List    rgb(235, 88, 74)    rgb(79, 129, 154)    rgb(114, 74, 127)    rgb(220, 199, 91)
    ${item2}    Get From List    ${list2}    ${int}
    Set Test Variable    \${mtcolor}    ${EMPTY}
    Set Test Variable    ${mtcolor}    ${item2}

Get Export
    [Arguments]    ${min}=0    ${max}=3
    ${int}    Evaluate    random.randint(${min}, ${max})    random
    ${list}    Create List    csv    json    plaintext    image
    ${item}    Get From List    ${list}    ${int}
    Set Test Variable    \${export}    ${EMPTY}
    Set Test Variable    ${export}    ${item}

Get Board Size
    [Arguments]    ${widthmin}    ${widthmax}    ${heightmin}    ${heightmax}
    ${int}    Evaluate    random.randint(${widthmin}, ${widthmax})    random
    Set Test Variable    \${width}    ${EMPTY}
    Set Test Variable    ${width}    ${int}
    ${int2}    Evaluate    random.randint(${heightmin}, ${heightmax})    random
    Set Test Variable    \${height}    ${EMPTY}
    Set Test Variable    ${height}    ${int2}

Input Markdown Text
    Get Markdown Text From File    //textarea[@placeholder='Ticket content']

Calculate Board Size
    [Arguments]    ${width}    ${height}
    ${bwidth}    Evaluate    ${width}*192
    ${bheight}    Evaluate    ${height}*108
    Set Test Variable    \${boardwidth}    ${EMPTY}
    Set Test Variable    ${boardwidth}    ${bwidth}
    Set Test Variable    \${boardheight}    ${EMPTY}
    Set Test Variable    ${boardheight}    ${bheight}
